
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftASSIGNleftORleftANDleftLTGTLEGEleftEQNEleftLSHIFTRSHIFTleftPLUSMINUSleftTIMESDIVIDErightUMINUSNOTAND ASSIGN BREAK CHAR COMMA COMMENT CONTINUE DIVIDE ELSE EQ GE GT ID IF INT LBRACE LE LPAREN LSHIFT LT MINUS NE NOT NUMBER OR PLUS PRINT RBRACE RETURN RPAREN RSHIFT SEMI TIMES VOID WHILEStart : Program\n    Program : Program GlobalDecl\n            |\n    GlobalDecl : FuncDecl\n               | VarDecl SEMI\n    FuncDecl : FuncHead FuncBodyFuncHead : Type FuncName LPAREN newScope Args RPARENFuncBody : LBRACE Stmts RBRACEnewScope :FuncName : ID\n    Args : Arg\n         |\n    Type : INT\n         | CHAR\n         | VOID\n    \n    Arg : Type ID\n        | Arg COMMA Type ID\n    VarDeclStmt : VarDecl SEMI\n    VarDecl : Type ID\n            | VarDecl COMMA ID\n    \n    Stmts : Stmts Stmt\n         |\n    Stmt : AssignStmt\n         | PrintStmt\n         | CallStmt\n         | ReturnStmt\n         | IfStmt\n         | WhileStmt\n         | BreakStmt\n         | ContinueStmt\n         | VarDeclStmt\n    AssignStmt : ID ASSIGN Expr SEMIPrintStmt : PRINT LPAREN Actuals RPAREN SEMI\n    PActuals : PActuals COMMA Expr\n             |CallStmt : CallExpr SEMICallExpr : ID LPAREN Actuals RPAREN\n    Actuals : Expr PActuals\n            |\n    ReturnStmt : RETURN Expr SEMI\n               | RETURN SEMI\n    \n    IfStmt : If TestExpr Then StmtsBlock EndThen EndIf\n           | If TestExpr Then StmtsBlock EndThen Else StmtsBlock EndIf\n    TestExpr : LPAREN Expr RPARENStmtsBlock : LBRACE newScope Stmts RBRACE If : IFElse : ELSEThen :EndThen :EndIf :\n    WhileStmt : While TestExpr Do StmtsBlock EndWhile\n    While : WHILEDo :EndWhile :\n    BreakStmt : BREAK SEMI\n    \n    ContinueStmt : CONTINUE SEMI\n    \n    Expr : Expr PLUS Expr\n         | Expr MINUS Expr\n         | Expr TIMES Expr\n         | Expr DIVIDE Expr\n         | Expr LSHIFT Expr\n         | Expr RSHIFT Expr\n         | Expr LT Expr\n         | Expr GT Expr\n         | Expr EQ Expr\n         | Expr NE Expr\n         | Expr LE Expr\n         | Expr GE Expr\n         | Expr OR Expr\n         | Expr AND Expr\n    \n    Expr : NOT Expr\n         | MINUS Expr %prec UMINUS\n    \n    Expr : NUMBER\n         | LPAREN Expr RPAREN\n    Expr : CallExprExpr : ID'
    
_lr_action_items = {'INT':([0,2,3,4,11,13,14,18,19,20,21,22,23,24,25,26,27,28,29,30,43,47,49,59,60,61,70,93,94,113,114,116,119,120,121,122,125,128,129,130,131,],[-3,8,-2,-4,-5,-6,-22,8,-9,-8,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,8,-36,-41,-55,-56,-18,-40,8,-32,-49,-9,-54,-33,-50,-22,-51,-42,8,-50,-45,-43,]),'CHAR':([0,2,3,4,11,13,14,18,19,20,21,22,23,24,25,26,27,28,29,30,43,47,49,59,60,61,70,93,94,113,114,116,119,120,121,122,125,128,129,130,131,],[-3,9,-2,-4,-5,-6,-22,9,-9,-8,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,9,-36,-41,-55,-56,-18,-40,9,-32,-49,-9,-54,-33,-50,-22,-51,-42,9,-50,-45,-43,]),'VOID':([0,2,3,4,11,13,14,18,19,20,21,22,23,24,25,26,27,28,29,30,43,47,49,59,60,61,70,93,94,113,114,116,119,120,121,122,125,128,129,130,131,],[-3,10,-2,-4,-5,-6,-22,10,-9,-8,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,10,-36,-41,-55,-56,-18,-40,10,-32,-49,-9,-54,-33,-50,-22,-51,-42,10,-50,-45,-43,]),'$end':([0,1,2,3,4,11,13,20,],[-3,0,-1,-2,-4,-5,-6,-8,]),'SEMI':([5,15,17,33,34,37,38,39,48,52,54,55,62,66,85,86,95,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,],[11,-19,-20,47,49,59,60,61,70,-73,-75,-76,-19,94,-72,-71,-37,119,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-74,]),'COMMA':([5,15,17,39,52,54,55,62,65,68,85,86,91,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,123,124,],[12,-19,-20,12,-73,-75,-76,-19,93,-35,-72,-71,-16,-37,118,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-74,-17,-34,]),'LBRACE':([6,56,58,88,90,92,115,126,127,],[14,-48,-53,114,114,-7,-44,114,-47,]),'ID':([7,8,9,10,12,14,18,21,22,23,24,25,26,27,28,29,30,34,42,44,45,46,47,49,50,51,53,57,59,60,61,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,113,114,116,117,118,119,120,121,122,125,128,129,130,131,],[15,-13,-14,-15,17,-22,31,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,55,62,55,55,55,-36,-41,55,55,55,55,-55,-56,-18,91,-40,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-32,-49,-9,-54,123,55,-33,-50,-22,-51,-42,31,-50,-45,-43,]),'RBRACE':([14,18,21,22,23,24,25,26,27,28,29,30,47,49,59,60,61,70,94,113,114,116,119,120,121,122,125,128,129,130,131,],[-22,20,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,-41,-55,-56,-18,-40,-32,-49,-9,-54,-33,-50,-22,-51,-42,130,-50,-45,-43,]),'PRINT':([14,18,21,22,23,24,25,26,27,28,29,30,47,49,59,60,61,70,94,113,114,116,119,120,121,122,125,128,129,130,131,],[-22,32,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,-41,-55,-56,-18,-40,-32,-49,-9,-54,-33,-50,-22,-51,-42,32,-50,-45,-43,]),'RETURN':([14,18,21,22,23,24,25,26,27,28,29,30,47,49,59,60,61,70,94,113,114,116,119,120,121,122,125,128,129,130,131,],[-22,34,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,-41,-55,-56,-18,-40,-32,-49,-9,-54,-33,-50,-22,-51,-42,34,-50,-45,-43,]),'BREAK':([14,18,21,22,23,24,25,26,27,28,29,30,47,49,59,60,61,70,94,113,114,116,119,120,121,122,125,128,129,130,131,],[-22,37,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,-41,-55,-56,-18,-40,-32,-49,-9,-54,-33,-50,-22,-51,-42,37,-50,-45,-43,]),'CONTINUE':([14,18,21,22,23,24,25,26,27,28,29,30,47,49,59,60,61,70,94,113,114,116,119,120,121,122,125,128,129,130,131,],[-22,38,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,-41,-55,-56,-18,-40,-32,-49,-9,-54,-33,-50,-22,-51,-42,38,-50,-45,-43,]),'IF':([14,18,21,22,23,24,25,26,27,28,29,30,47,49,59,60,61,70,94,113,114,116,119,120,121,122,125,128,129,130,131,],[-22,40,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,-41,-55,-56,-18,-40,-32,-49,-9,-54,-33,-50,-22,-51,-42,40,-50,-45,-43,]),'WHILE':([14,18,21,22,23,24,25,26,27,28,29,30,47,49,59,60,61,70,94,113,114,116,119,120,121,122,125,128,129,130,131,],[-22,41,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,-41,-55,-56,-18,-40,-32,-49,-9,-54,-33,-50,-22,-51,-42,41,-50,-45,-43,]),'LPAREN':([15,16,31,32,34,35,36,40,41,44,45,46,50,51,53,55,57,71,72,73,74,75,76,77,78,79,80,81,82,83,84,118,],[-10,19,45,46,53,57,57,-46,-52,53,53,53,53,53,53,45,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'RPAREN':([19,43,45,46,52,54,55,64,65,67,68,69,85,86,87,89,91,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,123,124,],[-9,-12,-39,-39,-73,-75,-76,92,-11,95,-35,97,-72,-71,112,115,-16,-37,-38,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-74,-17,-34,]),'ASSIGN':([31,],[44,]),'NOT':([34,44,45,46,50,51,53,57,71,72,73,74,75,76,77,78,79,80,81,82,83,84,118,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'MINUS':([34,44,45,46,48,50,51,52,53,54,55,57,66,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,118,124,],[50,50,50,50,72,50,50,-73,50,-75,-76,50,72,72,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-72,-71,72,72,-37,-57,-58,-59,-60,72,72,72,72,72,72,72,72,72,72,-74,50,72,]),'NUMBER':([34,44,45,46,50,51,53,57,71,72,73,74,75,76,77,78,79,80,81,82,83,84,118,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'PLUS':([48,52,54,55,66,68,85,86,87,89,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,124,],[71,-73,-75,-76,71,71,-72,-71,71,71,-37,-57,-58,-59,-60,71,71,71,71,71,71,71,71,71,71,-74,71,]),'TIMES':([48,52,54,55,66,68,85,86,87,89,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,124,],[73,-73,-75,-76,73,73,-72,-71,73,73,-37,73,73,-59,-60,73,73,73,73,73,73,73,73,73,73,-74,73,]),'DIVIDE':([48,52,54,55,66,68,85,86,87,89,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,124,],[74,-73,-75,-76,74,74,-72,-71,74,74,-37,74,74,-59,-60,74,74,74,74,74,74,74,74,74,74,-74,74,]),'LSHIFT':([48,52,54,55,66,68,85,86,87,89,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,124,],[75,-73,-75,-76,75,75,-72,-71,75,75,-37,-57,-58,-59,-60,-61,-62,75,75,75,75,75,75,75,75,-74,75,]),'RSHIFT':([48,52,54,55,66,68,85,86,87,89,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,124,],[76,-73,-75,-76,76,76,-72,-71,76,76,-37,-57,-58,-59,-60,-61,-62,76,76,76,76,76,76,76,76,-74,76,]),'LT':([48,52,54,55,66,68,85,86,87,89,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,124,],[77,-73,-75,-76,77,77,-72,-71,77,77,-37,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,77,77,-74,77,]),'GT':([48,52,54,55,66,68,85,86,87,89,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,124,],[78,-73,-75,-76,78,78,-72,-71,78,78,-37,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,78,78,-74,78,]),'EQ':([48,52,54,55,66,68,85,86,87,89,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,124,],[79,-73,-75,-76,79,79,-72,-71,79,79,-37,-57,-58,-59,-60,-61,-62,79,79,-65,-66,79,79,79,79,-74,79,]),'NE':([48,52,54,55,66,68,85,86,87,89,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,124,],[80,-73,-75,-76,80,80,-72,-71,80,80,-37,-57,-58,-59,-60,-61,-62,80,80,-65,-66,80,80,80,80,-74,80,]),'LE':([48,52,54,55,66,68,85,86,87,89,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,124,],[81,-73,-75,-76,81,81,-72,-71,81,81,-37,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,81,81,-74,81,]),'GE':([48,52,54,55,66,68,85,86,87,89,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,124,],[82,-73,-75,-76,82,82,-72,-71,82,82,-37,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,82,82,-74,82,]),'OR':([48,52,54,55,66,68,85,86,87,89,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,124,],[83,-73,-75,-76,83,83,-72,-71,83,83,-37,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-74,83,]),'AND':([48,52,54,55,66,68,85,86,87,89,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,124,],[84,-73,-75,-76,84,84,-72,-71,84,84,-37,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,84,-70,-74,84,]),'ELSE':([113,120,130,],[-49,127,-45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Start':([0,],[1,]),'Program':([0,],[2,]),'GlobalDecl':([2,],[3,]),'FuncDecl':([2,],[4,]),'VarDecl':([2,18,128,],[5,39,39,]),'FuncHead':([2,],[6,]),'Type':([2,18,43,93,128,],[7,42,63,117,42,]),'FuncBody':([6,],[13,]),'FuncName':([7,],[16,]),'Stmts':([14,121,],[18,128,]),'Stmt':([18,128,],[21,21,]),'AssignStmt':([18,128,],[22,22,]),'PrintStmt':([18,128,],[23,23,]),'CallStmt':([18,128,],[24,24,]),'ReturnStmt':([18,128,],[25,25,]),'IfStmt':([18,128,],[26,26,]),'WhileStmt':([18,128,],[27,27,]),'BreakStmt':([18,128,],[28,28,]),'ContinueStmt':([18,128,],[29,29,]),'VarDeclStmt':([18,128,],[30,30,]),'CallExpr':([18,34,44,45,46,50,51,53,57,71,72,73,74,75,76,77,78,79,80,81,82,83,84,118,128,],[33,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,33,]),'If':([18,128,],[35,35,]),'While':([18,128,],[36,36,]),'newScope':([19,114,],[43,121,]),'Expr':([34,44,45,46,50,51,53,57,71,72,73,74,75,76,77,78,79,80,81,82,83,84,118,],[48,66,68,68,85,86,87,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,124,]),'TestExpr':([35,36,],[56,58,]),'Args':([43,],[64,]),'Arg':([43,],[65,]),'Actuals':([45,46,],[67,69,]),'Then':([56,],[88,]),'Do':([58,],[90,]),'PActuals':([68,],[96,]),'StmtsBlock':([88,90,126,],[113,116,129,]),'EndThen':([113,],[120,]),'EndWhile':([116,],[122,]),'EndIf':([120,129,],[125,131,]),'Else':([120,],[126,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Start","S'",1,None,None,None),
  ('Start -> Program','Start',1,'p_Start','microC_parser.py',72),
  ('Program -> Program GlobalDecl','Program',2,'p_Program','microC_parser.py',83),
  ('Program -> <empty>','Program',0,'p_Program','microC_parser.py',84),
  ('GlobalDecl -> FuncDecl','GlobalDecl',1,'p_GlobalDecl','microC_parser.py',93),
  ('GlobalDecl -> VarDecl SEMI','GlobalDecl',2,'p_GlobalDecl','microC_parser.py',94),
  ('FuncDecl -> FuncHead FuncBody','FuncDecl',2,'p_FuncDecl','microC_parser.py',103),
  ('FuncHead -> Type FuncName LPAREN newScope Args RPAREN','FuncHead',6,'p_FuncHead','microC_parser.py',111),
  ('FuncBody -> LBRACE Stmts RBRACE','FuncBody',3,'p_FuncBody','microC_parser.py',121),
  ('newScope -> <empty>','newScope',0,'p_newScope','microC_parser.py',128),
  ('FuncName -> ID','FuncName',1,'p_FuncName','microC_parser.py',135),
  ('Args -> Arg','Args',1,'p_Args','microC_parser.py',147),
  ('Args -> <empty>','Args',0,'p_Args','microC_parser.py',148),
  ('Type -> INT','Type',1,'p_Type','microC_parser.py',156),
  ('Type -> CHAR','Type',1,'p_Type','microC_parser.py',157),
  ('Type -> VOID','Type',1,'p_Type','microC_parser.py',158),
  ('Arg -> Type ID','Arg',2,'p_Arg','microC_parser.py',165),
  ('Arg -> Arg COMMA Type ID','Arg',4,'p_Arg','microC_parser.py',166),
  ('VarDeclStmt -> VarDecl SEMI','VarDeclStmt',2,'p_VarDeclStmt','microC_parser.py',184),
  ('VarDecl -> Type ID','VarDecl',2,'p_VarDecl','microC_parser.py',190),
  ('VarDecl -> VarDecl COMMA ID','VarDecl',3,'p_VarDecl','microC_parser.py',191),
  ('Stmts -> Stmts Stmt','Stmts',2,'p_Stmts','microC_parser.py',218),
  ('Stmts -> <empty>','Stmts',0,'p_Stmts','microC_parser.py',219),
  ('Stmt -> AssignStmt','Stmt',1,'p_Stmt','microC_parser.py',225),
  ('Stmt -> PrintStmt','Stmt',1,'p_Stmt','microC_parser.py',226),
  ('Stmt -> CallStmt','Stmt',1,'p_Stmt','microC_parser.py',227),
  ('Stmt -> ReturnStmt','Stmt',1,'p_Stmt','microC_parser.py',228),
  ('Stmt -> IfStmt','Stmt',1,'p_Stmt','microC_parser.py',229),
  ('Stmt -> WhileStmt','Stmt',1,'p_Stmt','microC_parser.py',230),
  ('Stmt -> BreakStmt','Stmt',1,'p_Stmt','microC_parser.py',231),
  ('Stmt -> ContinueStmt','Stmt',1,'p_Stmt','microC_parser.py',232),
  ('Stmt -> VarDeclStmt','Stmt',1,'p_Stmt','microC_parser.py',233),
  ('AssignStmt -> ID ASSIGN Expr SEMI','AssignStmt',4,'p_AssignStmt','microC_parser.py',239),
  ('PrintStmt -> PRINT LPAREN Actuals RPAREN SEMI','PrintStmt',5,'p_PrintStmt','microC_parser.py',277),
  ('PActuals -> PActuals COMMA Expr','PActuals',3,'p_PActuals','microC_parser.py',287),
  ('PActuals -> <empty>','PActuals',0,'p_PActuals','microC_parser.py',288),
  ('CallStmt -> CallExpr SEMI','CallStmt',2,'p_CallStmt','microC_parser.py',300),
  ('CallExpr -> ID LPAREN Actuals RPAREN','CallExpr',4,'p_CallExpr','microC_parser.py',305),
  ('Actuals -> Expr PActuals','Actuals',2,'p_Actuals','microC_parser.py',360),
  ('Actuals -> <empty>','Actuals',0,'p_Actuals','microC_parser.py',361),
  ('ReturnStmt -> RETURN Expr SEMI','ReturnStmt',3,'p_ReturnStmt','microC_parser.py',372),
  ('ReturnStmt -> RETURN SEMI','ReturnStmt',2,'p_ReturnStmt','microC_parser.py',373),
  ('IfStmt -> If TestExpr Then StmtsBlock EndThen EndIf','IfStmt',6,'p_IfStmt','microC_parser.py',382),
  ('IfStmt -> If TestExpr Then StmtsBlock EndThen Else StmtsBlock EndIf','IfStmt',8,'p_IfStmt','microC_parser.py',383),
  ('TestExpr -> LPAREN Expr RPAREN','TestExpr',3,'p_TestExpr','microC_parser.py',389),
  ('StmtsBlock -> LBRACE newScope Stmts RBRACE','StmtsBlock',4,'p_StmtsBlock','microC_parser.py',403),
  ('If -> IF','If',1,'p_If','microC_parser.py',408),
  ('Else -> ELSE','Else',1,'p_Else','microC_parser.py',413),
  ('Then -> <empty>','Then',0,'p_Then','microC_parser.py',419),
  ('EndThen -> <empty>','EndThen',0,'p_EndThen','microC_parser.py',424),
  ('EndIf -> <empty>','EndIf',0,'p_EndIf','microC_parser.py',432),
  ('WhileStmt -> While TestExpr Do StmtsBlock EndWhile','WhileStmt',5,'p_WhileStmt','microC_parser.py',438),
  ('While -> WHILE','While',1,'p_While','microC_parser.py',448),
  ('Do -> <empty>','Do',0,'p_Do','microC_parser.py',458),
  ('EndWhile -> <empty>','EndWhile',0,'p_EndWhile','microC_parser.py',466),
  ('BreakStmt -> BREAK SEMI','BreakStmt',2,'p_BreakStmt','microC_parser.py',475),
  ('ContinueStmt -> CONTINUE SEMI','ContinueStmt',2,'p_ContinueStmt','microC_parser.py',486),
  ('Expr -> Expr PLUS Expr','Expr',3,'p_Expr_1','microC_parser.py',497),
  ('Expr -> Expr MINUS Expr','Expr',3,'p_Expr_1','microC_parser.py',498),
  ('Expr -> Expr TIMES Expr','Expr',3,'p_Expr_1','microC_parser.py',499),
  ('Expr -> Expr DIVIDE Expr','Expr',3,'p_Expr_1','microC_parser.py',500),
  ('Expr -> Expr LSHIFT Expr','Expr',3,'p_Expr_1','microC_parser.py',501),
  ('Expr -> Expr RSHIFT Expr','Expr',3,'p_Expr_1','microC_parser.py',502),
  ('Expr -> Expr LT Expr','Expr',3,'p_Expr_1','microC_parser.py',503),
  ('Expr -> Expr GT Expr','Expr',3,'p_Expr_1','microC_parser.py',504),
  ('Expr -> Expr EQ Expr','Expr',3,'p_Expr_1','microC_parser.py',505),
  ('Expr -> Expr NE Expr','Expr',3,'p_Expr_1','microC_parser.py',506),
  ('Expr -> Expr LE Expr','Expr',3,'p_Expr_1','microC_parser.py',507),
  ('Expr -> Expr GE Expr','Expr',3,'p_Expr_1','microC_parser.py',508),
  ('Expr -> Expr OR Expr','Expr',3,'p_Expr_1','microC_parser.py',509),
  ('Expr -> Expr AND Expr','Expr',3,'p_Expr_1','microC_parser.py',510),
  ('Expr -> NOT Expr','Expr',2,'p_Expr_2','microC_parser.py',539),
  ('Expr -> MINUS Expr','Expr',2,'p_Expr_2','microC_parser.py',540),
  ('Expr -> NUMBER','Expr',1,'p_Expr_3','microC_parser.py',550),
  ('Expr -> LPAREN Expr RPAREN','Expr',3,'p_Expr_3','microC_parser.py',551),
  ('Expr -> CallExpr','Expr',1,'p_Expr_4','microC_parser.py',561),
  ('Expr -> ID','Expr',1,'p_Expr_5','microC_parser.py',567),
]
